import quantopian.algorithm as algo
from quantopian.pipeline import Pipeline
from quantopian.pipeline.data.builtin import USEquityPricing
from quantopian.pipeline.filters import QTradableStocksUS
import numpy as np
import quantopian.optimize as opt
from quantopian.pipeline.experimental import risk_loading_pipeline

# Constraint Parameters
MAX_GROSS_LEVERAGE = 1.0

def initialize(context):
    """
    Called once at the start of the algorithm.
    """
    context.security = symbol('AAPL')
        
    # Rebalance every day, 4 hour (240 min) after market open.
    algo.schedule_function(
        rebalance,
        algo.date_rules.every_day(),
        algo.time_rules.market_open(hours=4),
    )

    # Record tracking variables at the end of each day.
    algo.schedule_function(
        record_vars,
        algo.date_rules.every_day(),
        algo.time_rules.market_close(),
    )

    # Create our dynamic stock selector.
    algo.attach_pipeline(make_pipeline(), 'pipeline')

    # Attach the pipeline for the risk model factors that we
    # want to neutralize in the optimization step. The 'risk_factors' string is
    # used to retrieve the output of the pipeline in before_trading_start below.
    algo.attach_pipeline(risk_loading_pipeline(), 'risk_factors')

def make_pipeline():
    """
    A function to create our dynamic stock selector (pipeline). Documentation
    on pipeline can be found here:
    https://www.quantopian.com/help#pipeline-title
    """

    # Base universe set to the QTradableStocksUS
    base_universe = QTradableStocksUS()

    # Factor of yesterday's close price.
    yesterday_close = USEquityPricing.close.latest

    pipe = Pipeline(
        columns={
            'close': yesterday_close,
        },
        screen=base_universe
    )
    return pipe


def before_trading_start(context, data):
    """
    Called every day before market open.
    """
    context.output = algo.pipeline_output('pipeline')

    # These are the securities that we are interested in trading each day.
    context.security_list = context.output.index
    
     # This dataframe will contain all of our risk loadings
    context.risk_loadings = algo.pipeline_output('risk_factors')


def rebalance(context, data):
    """
    Execute orders according to our schedule_function() timing.
    """    
    bar_length = 240
    price = data.history(context.security, 'price', bar_length, '1m')
    am = np.diff(price)  # compute the amplitude of close price
    [rs,f1,f2] = rsf(am , bar_length)  # rsf function is used
    RSI = 100-100/(1+rs) 
    # rsi = talib.RSI(prices, timeperiod=period)
    # RSI=rsi[-1]
    # print("RSI:",RSI)
    target_weight = 0
    if  (50<RSI<80) or (RSI<15):
        target_weight = 1 
        
    if  (20<RSI<50) or (RSI>85):
        target_weight = -1
        
    objective = opt.TargetWeights({context.security: target_weight})
    
    # Define the list of constraints
    constraints = []
    # Constrain our maximum gross leverage
    constraints.append(opt.MaxGrossExposure(MAX_GROSS_LEVERAGE))   

    # Put together all the pieces we defined above by passing
    # them into the algo.order_optimal_portfolio function. This handles
    # all of our ordering logic, assigning appropriate weights
    # to the securities in our universe to maximize our alpha with
    # respect to the given constraints.
    algo.order_optimal_portfolio(
        objective=objective,
        constraints=constraints
    )


def record_vars(context, data):
    """
    Plot variables at the end of each day.
    """
    pass


def handle_data(context, data):
    """
    Called every minute.
    """
    pass

def rsf(am ,length):
    ''' Function to get rs
    '''
    i=0;inc=0;dec=0;f1=0;f2=0;
    for i in range(length-2):
      if  am[i] > 0:
          inc = inc + am[i]
          f2=f2+1
      if  am[i] < 0:
          dec = dec - am[i]
          f1=f1+1
    return inc/dec,f1,f2

def rsif(am ,length):
    ''' Function to get rsi
    '''
    i=0;g1=0;g2=0;
    for i in range(length-2):
      if  am[i] > 0:
          g2=g2+1
      if  am[i] < 0:
          g1=g1+1
    return g1,g2